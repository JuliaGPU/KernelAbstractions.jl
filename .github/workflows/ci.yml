name: CI-KA
on:
  push:
    branches:
      - main
      - release-*
    tags: '*'
  pull_request:
defaults:
  run:
    shell: bash
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  CI:
    name: CI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
#       version:
#         - '1.10'
#         - '1.11'
#      os:
#         - ubuntu-latest
#         - macOS-latest
#         - windows-latest
#       arch:
#         - x64
#       pocl: [jll,]
        include:
          - version: '1.10'
            os: ubuntu-latest
            arch: x64
            pocl: local
            allow_failure: false
          - version: '1.11'
            os: ubuntu-latest
            arch: x64
            pocl: local
            allow_failure: false
          - version: '1.12'
            os: ubuntu-latest
            arch: x64
            pocl: local
            allow_failure: false
#          - version: 'nightly'
#            os: ubuntu-latest
#            arch: x64
#            pocl: local
#            allow_failure: true
#          - version: 'nightly'
#            os: ubuntu-latest
#            arch: x64
#            pocl: local
#            allow_failure: true
#          - version: 'nightly'
#            os: ubuntu-latest
#            arch: x64
#            pocl: jll
#            allow_failure: true
#          
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/install-juliaup@v2
        with:
          channel: ${{ matrix.version }}
      - uses: julia-actions/cache@v2
      - name: Checkout pocl
        if: ${{ matrix.pocl == 'local' }}
        uses: actions/checkout@v4
        with:
          repository: pocl/pocl
          path: pocl
      - name: Install system dependencies
        if: ${{ matrix.pocl == 'local' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config
      - name: Install Julia dependencies
        if: ${{ matrix.pocl == 'local' }}
        run: |
            touch pocl/Project.toml
            julia --project=pocl --color=yes -e '
              using Pkg
              # unversioned
              Pkg.add([
                "SPIRV_Tools_jll",
                "OpenCL_jll",
                "OpenCL_Headers_jll",
                "Hwloc_jll",
                "CMake_jll",
              ])
              # versioned
              Pkg.add(name="LLVM_full_jll", version="20")
              Pkg.add(name="SPIRV_LLVM_Translator_jll", version="20")'
      - name: Build PoCL
        if: ${{ matrix.pocl == 'local' }}
        run: |
            julia --project=pocl --color=yes -e '
              using LLVM_full_jll,
                    SPIRV_Tools_jll, SPIRV_LLVM_Translator_jll,
                    OpenCL_jll, OpenCL_Headers_jll,
                    Hwloc_jll, CMake_jll
              sourcedir = joinpath(@__DIR__, "pocl")
              builddir = joinpath(@__DIR__, "build")
              destdir = joinpath(@__DIR__, "target")
              prefix = []
              for jll in [SPIRV_Tools_jll, SPIRV_LLVM_Translator_jll, OpenCL_jll,
                          OpenCL_Headers_jll, Hwloc_jll]
                  push!(prefix, jll.artifact_dir)
              end
              withenv("LD_LIBRARY_PATH" => joinpath(Sys.BINDIR, Base.PRIVATE_LIBDIR)) do
                  mkpath(builddir)
                  run(```cmake -B $builddir -S $sourcedir
                         -GNinja
                         -DCMAKE_CXX_FLAGS="-fdiagnostics-color=always"
                         -DCMAKE_C_FLAGS="-fdiagnostics-color=always"
                         -DCMAKE_BUILD_TYPE=Debug
                         -DENABLE_TESTS:Bool=OFF
                         -DSTATIC_LLVM:Bool=On
                         -DPOCL_DEBUG_MESSAGES:Bool=ON
                         -DCMAKE_INSTALL_PREFIX=$destdir
                         -DWITH_LLVM_CONFIG=$(LLVM_full_jll.artifact_dir)/tools/llvm-config
                         -DCMAKE_PREFIX_PATH="$(join(prefix, ";"))"
                         -DKERNELLIB_HOST_CPU_VARIANTS=distro```)
                  run(```$(cmake()) --build $builddir --parallel $(Sys.CPU_THREADS) --target install```)
              end'
            echo '[pocl_jll]' > test/LocalPreferences.toml
            echo 'libpocl_path="${{ github.workspace }}/target/lib/libpocl.so"' >> test/LocalPreferences.toml
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
        with:
          annotate: true
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          file: lcov.info
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - run: |
          julia --project=docs -e 'import Pkg; Pkg.develop(path=".")'
          julia --project=docs docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
  doctests:
    name: Doctests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - run: |
          julia --project=docs -e 'import Pkg; Pkg.develop(path=".")'
          julia --project=docs -e '
            using Documenter: doctest
            using KernelAbstractions
            doctest(KernelAbstractions; manual = true)'
